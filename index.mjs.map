{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/dmaxabssorted.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Computes the maximum absolute value of a sorted double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - sorted input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} maximum absolute value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dmaxabssorted( 4, x, 2, 1 );\n* // returns 4.0\n*/\nfunction dmaxabssorted( N, x, strideX, offsetX ) {\n\tvar v1;\n\tvar v2;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tv1 = x[ offsetX ];\n\tv2 = x[ offsetX + ( ( N - 1 ) * strideX ) ];\n\tif ( isnan( v1 ) || isnan( v2 ) ) {\n\t\treturn NaN;\n\t}\n\tv1 = abs( v1 );\n\tv2 = abs( v2 );\n\tif ( v1 > v2 ) {\n\t\treturn v1;\n\t}\n\treturn v2;\n}\n\n\n// EXPORTS //\n\nexport default dmaxabssorted;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the maximum absolute value of a sorted double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - sorted input array\n* @param {integer} strideX - stride length\n* @returns {number} maximum absolute value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ -1.0, -2.0, -3.0 ] );\n*\n* var v = dmaxabssorted( x.length, x, 1 );\n* // returns 3.0\n*/\nfunction dmaxabssorted( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dmaxabssorted;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dmaxabssorted from './dmaxabssorted.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dmaxabssorted, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dmaxabssorted;\n"],"names":["dmaxabssorted","N","x","strideX","offsetX","v1","v2","NaN","isnan","abs","ndarray","stride2offset","setReadOnly"],"mappings":";;+ZA6CA,SAASA,EAAeC,EAAGC,EAAGC,EAASC,GACtC,IAAIC,EACAC,EAEJ,OAAKL,GAAK,EACFM,IAEG,IAANN,GAAuB,IAAZE,EACRD,EAAG,IAEXG,EAAKH,EAAGE,GACRE,EAAKJ,EAAGE,GAAcH,EAAI,GAAME,GAC3BK,EAAOH,IAAQG,EAAOF,GACnBC,KAERF,EAAKI,EAAKJ,KACVC,EAAKG,EAAKH,IAEFD,EAEDC,EACR,CCtBA,SAASN,EAAeC,EAAGC,EAAGC,GAC7B,OAAOO,EAAST,EAAGC,EAAGC,EAASQ,EAAeV,EAAGE,GAClD,CCjBAS,EAAAZ,EAAA,UAAAU"}